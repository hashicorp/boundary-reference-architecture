#!/bin/bash

# Terraform variables used: 
# vault_name - the name of the key vault being used for KMS and certificate storage
# type - which type of deployment, either "controller" or "worker"
# tenant_id - the tenant ID of the key vault being used for KMS
# db_username - Username for the database and database server
# db_password - Password for the username (might want to add this to Key Vault at some point)
# db_endpoint - FQDN of the database server
# db_name - The short name of the database server
# public_ip - The public IP address of the load balancer or controller DNS A record
# controller_ips - The internal IP address of all controller servers

# Install curl if it's not already there
sudo apt-get update
sudo apt-get install curl -y

# Get certificates from Key Vault
# Note the certificate info added as a secret in the Azure VM config
sudo mkdir -p /etc/pki/tls/boundary
secretsname=$(find /var/lib/waagent/ -name "*.prv" | cut -c -57)
sudo cp $secretsname.prv /etc/pki/tls/boundary/cert.key
sudo cp $secretsname.crt /etc/pki/tls/boundary/cert.crt

# Get latest boundary binary
# TODO: pass boundary version through a variable
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get update && sudo apt-get install boundary=${boundary_version} -y

# Get private ip address
private_ip=$(hostname -i | awk '{print $1}')

# Create controller config if type is "controller"
# This config assumes you are using postgresql as the database and 
# Azure Key Vault for the KMS
# This config also assumes that you have are using a certificate created by Azure Key Vault
# or you could source it another way

%{ if type == "controller"}
cat <<EOF > ~/boundary-controller.hcl
disable_mlock = true

telemetry { 
  prometheus_retention_time = "24h"
  disable_hostname          = true
}

controller {
  name        = "demo-controller-$(hostname)"
  description = "A controller for a demo!"

  database {
    url = "postgresql://${db_endpoint}:5432/postgres?user=${db_username}@${db_name}&password=${db_password}&sslmode=require"
  }
}

listener "tcp" {
  address                           = "$private_ip:9200"
	purpose                           = "api"
  tls_disable   = false
  tls_cert_file = "/etc/pki/tls/boundary/cert.crt"  
  tls_key_file  = "/etc/pki/tls/boundary/cert.key"
	# proxy_protocol_behavior         = "allow_authorized"
	# proxy_protocol_authorized_addrs = "127.0.0.1"
	cors_enabled                      = true
	cors_allowed_origins              = ["*"]
}

listener "tcp" {
  address                           = "$private_ip:9201"
	purpose                           = "cluster"
  tls_disable   = false
  tls_cert_file = "/etc/pki/tls/boundary/cert.crt" 
  tls_key_file  = "/etc/pki/tls/boundary/cert.key"
	# proxy_protocol_behavior         = "allow_authorized"
	# proxy_protocol_authorized_addrs = "127.0.0.1"
}

kms "azurekeyvault" {
	purpose    = "root"
	tenant_id     = "${tenant_id}"
    vault_name = "${vault_name}"
    key_name = "root"
}

kms "azurekeyvault" {
	purpose    = "worker-auth"
	tenant_id     = "${tenant_id}"
    vault_name = "${vault_name}"
    key_name = "worker"
}

kms "azurekeyvault" {
    purpose = "recovery"
	tenant_id     = "${tenant_id}"
    vault_name = "${vault_name}"
    key_name = "recovery"
}
EOF

sudo mv ~/boundary-controller.hcl /etc/boundary-controller.hcl

%{endif}

# Generates config if type is "worker"
# This config assumes that you are using the certificate from Azure Key Vault
# and you are using Key Vault for the KMS
#
# Controller IPs is a comma separated list of controller internal IP addresses
# Adding a new controller will require updating this configuration manually
#
# TODO: investigate using internal load balancer for worker to controller comms and remove
# need to define all controller IP addresses statically

%{ if type == "worker"}

# Create worker config
cat <<EOF > ~/boundary-worker.hcl

listener "tcp" {
  address = "$private_ip:9202"
	purpose = "proxy"
  tls_disable   = false
  tls_cert_file = "/etc/pki/tls/boundary/cert.crt"   
  tls_key_file  = "/etc/pki/tls/boundary/cert.key" 

	#proxy_protocol_behavior = "allow_authorized"
	#proxy_protocol_authorized_addrs = "127.0.0.1"
}

worker {
  # Name attr must be unique
	public_addr = "${public_ip}"
	name = "demo-worker-$(hostname)"
	description = "A default worker created for demonstration"
  controllers = [
%{ for ip in formatlist("%s",controller_ips) ~}
"${ip}",
%{ endfor ~}
  ]
}

kms "azurekeyvault" {
	purpose    = "worker-auth"
	tenant_id     = "${tenant_id}"
    vault_name = "${vault_name}"
    key_name = "worker"
}
EOF

sudo mv ~/boundary-worker.hcl /etc/boundary-worker.hcl

%{endif} 

# Install the boundary as a service for systemd on linux

sudo cat << EOF > ~/${name}-${type}.service
[Unit]
Description=${name} ${type}

[Service]
ExecStart=/usr/bin/${name} server -config /etc/${name}-${type}.hcl
User=boundary
Group=boundary
LimitMEMLOCK=infinity
Capabilities=CAP_IPC_LOCK+ep
CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK

[Install]
WantedBy=multi-user.target
EOF

sudo mv ~/${name}-${type}.service /etc/systemd/system/${name}-${type}.service

# Add the boundary system user and group to ensure we have a no-login
# user capable of owning and running Boundary
sudo adduser --system --group boundary || true
sudo chown boundary:boundary /etc/${name}-${type}.hcl
sudo chown boundary:boundary /usr/bin/boundary
sudo chown boundary:boundary /etc/pki/tls/boundary/cert.crt
sudo chown boundary:boundary /etc/pki/tls/boundary/cert.key


# Make sure to initialize the DB before starting the service. This will result in
# a database already initizalized warning if another controller or worker has done this 
# already, making it a lazy, best effort initialization
if [ "${type}" = "controller" ]; then
  sudo /usr/bin/boundary database init -skip-auth-method-creation -skip-host-resources-creation -skip-scopes-creation -skip-target-creation -config /etc/${name}-${type}.hcl || true
fi

# Finish service configuration for boundary and start the service
sudo chmod 664 /etc/systemd/system/${name}-${type}.service
sudo systemctl daemon-reload
sudo systemctl enable ${name}-${type}
sudo systemctl start ${name}-${type}